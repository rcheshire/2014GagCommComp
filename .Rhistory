legend('topright',lty=c(1,3),lwd=c(2,2),col=c('red','black'),legend=c('unweighted','weighted'))
}
dim(acomp.hl.w.norm)
dim(hl.age.acomp.norm)
rownames(acomp.hl.w.norm)
rownames(hl.age.acomp.norm)
hl.age.acomp.norm=hl.age.acomp.norm[rownames(al.age.acomp.norm)%in%rownames(acomp.hl.w.norm),]
hl.age.acomp.norm=hl.age.acomp.norm[rownames(hl.age.acomp.norm)%in%rownames(acomp.hl.w.norm),]
dim(hl.age.acomp.norm)
windows(record=TRUE,width=7,height=10)
par(mar=c(1.5, 2, 1, 1) + 0.1,oma=c(4,4,0,0))
#cull years from unweighted age comp
hl.age.acomp.norm=hl.age.acomp.norm[rownames(hl.age.acomp.norm)%in%rownames(acomp.hl.w.norm),]
agebins=as.numeric(colnames(acomp.hl.w.norm))
year=as.numeric(rownames(acomp.hl.w.norm))
for(i in 1:dim(acomp.hl.w.norm)[1]){
plot(agebins,acomp.hl.w.norm[i,],type='n',ylim=c(0,max(acomp.hl.w.norm)),ylab='',xlab='Age')
text(10,max(acomp.hl.w),paste(year[i],'Handline',sep='-'))
lines(agebins,hl.age.acomp.norm[i,],lwd=2,lty=1,col='red')
lines(agebins,acomp.hl.w.norm[i,],lwd=2,lty=3,col='black')
legend('topright',lty=c(1,3),lwd=c(2,2),col=c('red','black'),legend=c('unweighted','weighted'))
}
windows(record=TRUE,width=7,height=10)
par(mar=c(1.5, 2, 1, 1) + 0.1,oma=c(4,4,0,0))
#cull years from unweighted age comp
hl.age.acomp.norm=hl.age.acomp.norm[rownames(hl.age.acomp.norm)%in%rownames(acomp.hl.w.norm),]
agebins=as.numeric(colnames(acomp.hl.w.norm))
year=as.numeric(rownames(acomp.hl.w.norm))
for(i in 1:dim(acomp.hl.w.norm)[1]){
plot(agebins,acomp.hl.w.norm[i,],type='n',ylim=c(0,max(acomp.hl.w.norm)),ylab='',xlab='Age')
text(2,max(acomp.hl.w.norm),paste(year[i],'Handline',sep='-'))
lines(agebins,hl.age.acomp.norm[i,],lwd=2,lty=1,col='red')
lines(agebins,acomp.hl.w.norm[i,],lwd=2,lty=3,col='black')
legend('topright',lty=c(1,3),lwd=c(2,2),col=c('red','black'),legend=c('unweighted','weighted'))
}
windows(record=TRUE,width=7,height=10)
par(mar=c(1.5, 2, 1, 1) + 0.1,oma=c(4,4,0,0))
#cull years from unweighted age comp
hl.age.acomp.norm=hl.age.acomp.norm[rownames(hl.age.acomp.norm)%in%rownames(acomp.hl.w.norm),]
agebins=as.numeric(colnames(acomp.hl.w.norm))
year=as.numeric(rownames(acomp.hl.w.norm))
for(i in 1:dim(acomp.hl.w.norm)[1]){
plot(agebins,acomp.hl.w.norm[i,],type='n',ylim=c(0,max(acomp.hl.w.norm)),ylab='',xlab='Age')
text(2,.5,paste(year[i],'Handline',sep='-'))
lines(agebins,hl.age.acomp.norm[i,],lwd=2,lty=1,col='red')
lines(agebins,acomp.hl.w.norm[i,],lwd=2,lty=3,col='black')
legend('topright',lty=c(1,3),lwd=c(2,2),col=c('red','black'),legend=c('unweighted','weighted'))
}
hl.age.acomp.norm
head(age.hl.age)
head(age.hl.num)
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
age.hl.num$numage=1
head(age.hl.num)
y=min(age.hl$year):max(age.hl$year)
z=seq(min(age.hl$age,na.rm=TRUE),max(age.hl$age,na.rm=TRUE),by=1)
a=expand.grid(y=y,z=z)
colnames(a)=c('year','age')
age.hl.age=merge(a,age.hl.num,by=c('year','age'),all=TRUE)
age.hl.age$numage[is.na(age.hl.age$numage)==TRUE] = 0
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
age.hl.num$numage=age.length
# add zeros for missing combinations of year and age
y=min(age.hl$year):max(age.hl$year)
z=seq(min(age.hl$age,na.rm=TRUE),max(age.hl$age,na.rm=TRUE),by=1)
a=expand.grid(y=y,z=z)
colnames(a)=c('year','age')
age.hl.age=merge(a,age.hl.num,by=c('year','age'),all=TRUE)
age.hl.age$numage[is.na(age.hl.age$numage)==TRUE] = 0
head(age.hl.num)
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
age.hl.num$numage=age.length
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
head(age.hl.num)
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
age.hl.num$numage=age.hl.num$age.length
# add zeros for missing combinations of year and age
y=min(age.hl$year):max(age.hl$year)
z=seq(min(age.hl$age,na.rm=TRUE),max(age.hl$age,na.rm=TRUE),by=1)
a=expand.grid(y=y,z=z)
colnames(a)=c('year','age')
age.hl.age=merge(a,age.hl.num,by=c('year','age'),all=TRUE)
age.hl.age$numage[is.na(age.hl.age$numage)==TRUE] = 0
head(age.hl.age)
source('~/.active-rstudio-document', echo=TRUE)
colnames(acomp.hl.w.norm[,21])
colnames(acomp.hl.w.norm)[21]
dim(acomp.hl.w.norm)
x=sum(acomp.hl.w.norm[,21:28])
x
x=sum(acomp.hl.w.norm[21:28])
x
x=rowSums(acomp.hl.w.norm[,21:28])
x
y=cbind(acomp.hl.w.norm[,1:20],x)
y
rowname(acomp.hl.w.norm[20])="20"
rownames(acomp.hl.w.norm[20])="20"
rownames(acomp.hl.w.norm[,20])="20"
colnames(acomp.hl.w.norm[20])="20"
colnames(acomp.hl.w.norm[,20])="20"
colnames(acomp.hl.w.norm)=0:20
dim(acomp.hl.w.norm)
colnames(y)=0:20
head(y)
dim(hl.age.acomp.norm)
colnames(hl.age.acomp.norm)
head(age.hl)
x=summaryBy(tlcm~year+state,data=age.hl,FUN=length)
head(x)
age.hl$state[age.hl$state=""]="Unk"
age.hl$state[age.hl$state==""]="Unk"
x=levels(as.factor(age.hl$state))
x
age.hl$state[age.hl$state==""]="Unk"
x=age.hl$state[age.hl$state=="",]
x=age.hl$state[age.hl$state==""]
x
x=age.hl[age.hl$state=="",]
x
######################################################################
# gag 2014 update assessment length composition
# R. Cheshire 1/21/2014,  last edit 2/4/2014
#######warning, to do: modify pooling  over upper and lower values
######################################################################
######code to add years to comps....insert later
# rnames=as.numeric(rownames(hl.norm.unw))
# hl.norm.unw=cbind(rnames,hl.norm.unw)
# colnames(hl.norm.unw)[1]='year'
setwd("W:\\SEDAR\\Updates2014\\Gag\\Comps\\Commercial")
#W:\SEDAR\Updates2014\Gag\Comps\Commercial\2014GagCommLcomp\2014GagCommComp
require(doBy)
require(xtable)
library(reshape2)
# define sample size cutoff (state-specific sample size cutoff for weighting comps)
st.cutoff=0
yr.cutoff=100  #annual number of fish ---not implemented yet
#import data sets
tip=read.csv('gag_tip_sa.csv',header=TRUE)
hl.state.land=read.csv(file='hl.stateppt.csv',header=TRUE)#temporary until landings are received
dv.state.land=read.csv(file='dv.stateppt.csv',header=TRUE)#temporary until landings are received
#remove unwanted columns
tip=tip[,c(1,3,7,8,9,11)]
#rename variables
names(tip)=c('state','year','lentype','length','num','gear')
#remove records without units defined
tip=tip[tip$lentype!="",]
#convert to total length
sl=function(x){x=1.1908*x}  # conversions from sedar 10 workbook
fl=function(x){x=1.0341*x}
tip$tlmm[tip$lentype=="FORK LENGTH"]=fl(tip$length)
tip$tlmm[tip$lentype=="STANDARD LENGTH"]=sl(tip$length[tip$lentype=="STANDARD LENGTH"])
tip$tlmm[tip$lentype=="TOTAL LENGTH"]=tip$length[tip$lentype=="TOTAL LENGTH"]
#convert to 1 cm bins
rnd = function(x) trunc(x+0.5) #define round function (r's version of round is not typical US version)
tip$tlcm=rnd(tip$tlmm/10)
tip=tip[tip$tlcm<=145,] #as defined in SEDAR10-DW-14, removes 3 records
tip=tip[tip$tlcm>29.4,] #as defined by SEDAR10_SAR1_SA_Gag, removes 15 records
#redefine pooled values
tip$tlcm[tip$tlcm<29]=29 #lower
tip$tlcm[tip$tlcm>122]=122 #upper
tip=tip[tip$year<2013,]
#define gears
gears=levels(as.factor(tip$gear))
#the following gear index values need to be updated for each species/data set
gear_hl=gears[c(4,5,6,7,9,12,13,14,15)]
#[1] "LINES HAND"                    "LINES LONG SET WITH HOOKS"
#[3] "LINES LONG, REEF FISH"         "LINES POWER TROLL OTHER"
#[5] "OTTER TRAWL BOTTOM, FISH"      "REEL, ELECTRIC OR HYDRAULIC"
#[7] "REEL, MANUAL"                  "ROD AND REEL"
#[9] "ROD AND REEL, ELECTRIC (HAND)"
gear_dv=gears[c(2,16)]  #[1] "BY HAND, DIVING GEAR" "SPEARS"
#gears not included: vertical buoy gear, cast nets, not coded,
#     pots and traps (fish), pots and traps (include,
#split data to gears
tip.hl=tip[tip$gear%in%gear_hl,]
tip.dv=tip[tip$gear%in%gear_dv,]
#cleanup
tip.hl=tip.hl[,c(1,2,5,8)]
tip.dv=tip.dv[,c(1,2,5,8)]
#convert to 3cm bins from 29 to 122 cm #############trickery
lenbins=seq(29,122,by=3)
tip.hl$tl3cm[tip.hl$tlcm%in%lenbins]=tip.hl$tlcm[tip.hl$tlcm%in%lenbins]
temp.tl=tip.hl$tlcm+1
tip.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
temp.tl=tip.hl$tlcm-1
tip.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
#diving
tip.dv$tl3cm[tip.dv$tlcm%in%lenbins]=tip.dv$tlcm[tip.dv$tlcm%in%lenbins]
temp.tl=tip.dv$tlcm+1
tip.dv$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
temp.tl=tip.dv$tlcm-1
tip.dv$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
# add zeros for missing combinations of year, state, and length bin
#handline
x=levels(as.factor(tip.hl$state))
y=min(tip.hl$year):max(tip.hl$year)
z=seq(min(tip.hl$tl3cm,na.rm=TRUE),max(tip.hl$tl3cm,na.rm=TRUE),by=3)
a=expand.grid(x=x,y=y,z=z)
colnames(a)=c('state','year','tl3cm')
tip.hl=merge(a,tip.hl,by=c('state','year','tl3cm'),all=TRUE)
tip.hl$num[is.na(tip.hl$num)==TRUE] = 0
#diving
x=levels(as.factor(tip.dv$state))
y=as.numeric(levels(as.factor(tip.dv$year)))
z=seq(29,122,by=3)   #hardcode max and min to match handline
a=expand.grid(x=x,y=y,z=z)
colnames(a)=c('state','year','tl3cm')
tip.dv=merge(a,tip.dv,by=c('state','year','tl3cm'),all=TRUE)
tip.dv$num[is.na(tip.dv$num)==TRUE] = 0
###add sample size tables here
############ Handline #############
############################
###begin unweighted length comp - handline
hl.unw=summaryBy(num~year+tl3cm,data=tip.hl,FUN=sum)
hl.unw.tab=xtabs(num.sum~year+tl3cm,data=hl.unw)
hl.nfish=rowSums(hl.unw.tab)+0.0000001
for(i in 1:length(hl.nfish)){
if (hl.nfish[i]>st.cutoff){hl.nfish[i]=hl.nfish[i]
} else{hl.nfish[i]=0.0000001;hl.unw.tab[i,]=0}
}
hl.norm.unw=hl.unw.tab/hl.nfish
############ Diving #############
############################
###begin unweighted length comp - diving
dv.unw=summaryBy(num~year+tl3cm,data=tip.dv,FUN=sum)
dv.unw.tab=xtabs(num.sum~year+tl3cm,data=dv.unw)
dv.nfish=rowSums(dv.unw.tab)+0.0000001
for(i in 1:length(dv.nfish)){
if (dv.nfish[i]>st.cutoff){dv.nfish[i]=dv.nfish[i]
} else{dv.nfish[i]=0.0000001;dv.unw.tab[i,]=0}
}
dv.norm.unw=dv.unw.tab/dv.nfish
############# STATE-SPECIFIC COMPS
#north carolina handline
nc.hl.unw=summaryBy(num~year+tl3cm,data=tip.hl[tip.hl$state=='NC',],FUN=sum)
nc.hl.unw.tab=xtabs(num.sum~year+tl3cm,data=nc.hl.unw)
nc.hl.unw.tab=as.data.frame.matrix(nc.hl.unw.tab)
nc.hl.nfish=rowSums(nc.hl.unw.tab)
for(i in 1:length(nc.hl.nfish)){
if (nc.hl.nfish[i]>st.cutoff){nc.hl.nfish[i]=nc.hl.nfish[i]
} else{nc.hl.nfish[i]=0;nc.hl.unw.tab[i,]=0}
}
nc.hl.norm.unw=nc.hl.unw.tab/(nc.hl.nfish+0.00000001)
nc.hl.w=nc.hl.norm.unw*hl.state.land[,2]
#north carolina diving
nc.dv.unw=summaryBy(num~year+tl3cm,data=tip.dv[tip.dv$state=='NC',],FUN=sum)
nc.dv.unw.tab=xtabs(num.sum~year+tl3cm,data=nc.dv.unw)
nc.dv.unw.tab=as.data.frame.matrix(nc.dv.unw.tab)
nc.dv.nfish=rowSums(nc.dv.unw.tab)
for(i in 1:length(nc.dv.nfish)){
if (nc.dv.nfish[i]>st.cutoff){nc.dv.nfish[i]=nc.dv.nfish[i]
} else{nc.dv.nfish[i]=0;nc.dv.unw.tab[i,]=0}
}
nc.dv.norm.unw=nc.dv.unw.tab/(nc.dv.nfish+0.00000001)
nc.dv.w=nc.dv.norm.unw*dv.state.land[,2]
#south carolina handline
sc.hl.unw=summaryBy(num~year+tl3cm,data=tip.hl[tip.hl$state=='SC',],FUN=sum)
sc.hl.unw.tab=xtabs(num.sum~year+tl3cm,data=sc.hl.unw)
sc.hl.unw.tab=as.data.frame.matrix(sc.hl.unw.tab)
sc.hl.nfish=rowSums(sc.hl.unw.tab)
for(i in 1:length(sc.hl.nfish)){
if (sc.hl.nfish[i]>st.cutoff){sc.hl.nfish[i]=sc.hl.nfish[i]
} else{sc.hl.nfish[i]=0;sc.hl.unw.tab[i,]=0}
}
sc.hl.norm.unw=sc.hl.unw.tab/(sc.hl.nfish+0.00000001)
sc.hl.w=sc.hl.norm.unw*hl.state.land[,3]
#south carolina diving
sc.dv.unw=summaryBy(num~year+tl3cm,data=tip.dv[tip.dv$state=='SC',],FUN=sum)
sc.dv.unw.tab=xtabs(num.sum~year+tl3cm,data=sc.dv.unw)
sc.dv.unw.tab=as.data.frame.matrix(sc.dv.unw.tab)
sc.dv.nfish=rowSums(sc.dv.unw.tab)
for(i in 1:length(sc.dv.nfish)){
if (sc.dv.nfish[i]>st.cutoff){sc.dv.nfish[i]=sc.dv.nfish[i]
} else{sc.dv.nfish[i]=0;sc.dv.unw.tab[i,]=0}
}
sc.dv.norm.unw=sc.dv.unw.tab/(sc.dv.nfish+0.00000001)
sc.dv.w=sc.dv.norm.unw*dv.state.land[,3]
#georgia handline (no data after 2005)
ga.hl.unw=summaryBy(num~year+tl3cm,data=tip.hl[tip.hl$state=='GA',],FUN=sum)
ga.hl.unw.tab=xtabs(num.sum~year+tl3cm,data=ga.hl.unw)
ga.hl.unw.tab=as.data.frame.matrix(ga.hl.unw.tab)
ga.hl.nfish=rowSums(ga.hl.unw.tab)
for(i in 1:length(ga.hl.nfish)){
if (ga.hl.nfish[i]>st.cutoff){ga.hl.nfish[i]=ga.hl.nfish[i]
} else{ga.hl.nfish[i]=0;ga.hl.unw.tab[i,]=0}
}
ga.hl.norm.unw=ga.hl.unw.tab/(ga.hl.nfish+0.00000001)
ga.hl.w=ga.hl.norm.unw*hl.state.land[,4]
#georgia diving
ga.dv.unw=summaryBy(num~year+tl3cm,data=tip.dv[tip.dv$state=='GA',],FUN=sum)
ga.dv.unw.tab=xtabs(num.sum~year+tl3cm,data=ga.dv.unw)
ga.dv.unw.tab=as.data.frame.matrix(ga.dv.unw.tab)
ga.dv.nfish=rowSums(ga.dv.unw.tab)
for(i in 1:length(ga.dv.nfish)){
if (ga.dv.nfish[i]>st.cutoff){ga.dv.nfish[i]=ga.dv.nfish[i]
} else{ga.dv.nfish[i]=0;ga.dv.unw.tab[i,]=0}
}
ga.dv.norm.unw=ga.dv.unw.tab/(ga.dv.nfish+0.00000001)
ga.dv.w=ga.dv.norm.unw*dv.state.land[,4]
#florida handline
fl.hl.unw=summaryBy(num~year+tl3cm,data=tip.hl[tip.hl$state=='FL',],FUN=sum)
fl.hl.unw.tab=xtabs(num.sum~year+tl3cm,data=fl.hl.unw)
fl.hl.unw.tab=as.data.frame.matrix(fl.hl.unw.tab)
fl.hl.nfish=rowSums(fl.hl.unw.tab)
for(i in 1:length(fl.hl.nfish)){
if (fl.hl.nfish[i]>st.cutoff){fl.hl.nfish[i]=fl.hl.nfish[i]
} else{fl.hl.nfish[i]=0;fl.hl.unw.tab[i,]=0}
}
fl.hl.norm.unw=fl.hl.unw.tab/(fl.hl.nfish+0.0000001)
fl.hl.w=fl.hl.norm.unw*hl.state.land[,5]
#florida diving
fl.dv.unw=summaryBy(num~year+tl3cm,data=tip.dv[tip.dv$state=='FL',],FUN=sum)
fl.dv.unw.tab=xtabs(num.sum~year+tl3cm,data=fl.dv.unw)
fl.dv.unw.tab=as.data.frame.matrix(fl.dv.unw.tab)
fl.dv.nfish=rowSums(fl.dv.unw.tab)
for(i in 1:length(fl.dv.nfish)){
if (fl.dv.nfish[i]>st.cutoff){fl.dv.nfish[i]=fl.dv.nfish[i]
} else{fl.dv.nfish[i]=0;fl.dv.unw.tab[i,]=0}
}
fl.dv.norm.unw=fl.dv.unw.tab/(fl.dv.nfish+0.00000001)
fl.dv.w=fl.dv.norm.unw*dv.state.land[,5]
#combine state comps
#handline
hl.w=nc.hl.w+sc.hl.w+ga.hl.w+fl.hl.w
hl.norm.w=hl.w/rowSums(hl.w+0.0000001)
hl.norm.w.trim=hl.norm.w[rowSums(hl.norm.w)>0,]
hl.norm.unw.trim=hl.norm.unw[rowSums(hl.norm.w)>0,]
#diving
dv.w=nc.dv.w+sc.dv.w+ga.dv.w+fl.dv.w
dv.norm.w=dv.w/rowSums(dv.w+0.0000001)
dv.norm.w.trim=dv.norm.w[rowSums(dv.norm.w)>0,]
dv.norm.unw.trim=dv.norm.unw[rowSums(dv.norm.w)>0,]
#trim state comps to match combined comps for plotting
#handline
nc.hl.w.trim=nc.hl.w[rowSums(hl.norm.w)>0,]
sc.hl.w.trim=sc.hl.w[rowSums(hl.norm.w)>0,]
ga.hl.w.trim=ga.hl.w[rowSums(hl.norm.w)>0,]
fl.hl.w.trim=fl.hl.w[rowSums(hl.norm.w)>0,]
#diving
nc.dv.w.trim=nc.dv.w[rowSums(dv.norm.w)>0,]
sc.dv.w.trim=sc.dv.w[rowSums(dv.norm.w)>0,]
ga.dv.w.trim=ga.dv.w[rowSums(dv.norm.w)>0,]
fl.dv.w.trim=fl.dv.w[rowSums(dv.norm.w)>0,]
###############end of comp weighting
#create sample size tables
#handlinernames=as.numeric(row.names(hl.norm.unw))
hl.ss=cbind(nc.hl.nfish,sc.hl.nfish,ga.hl.nfish,fl.hl.nfish)
colnames(hl.ss)=c('NC','SC','GA','FL')
dv.ss=cbind(nc.dv.nfish,sc.dv.nfish,ga.dv.nfish,fl.dv.nfish)
colnames(dv.ss)=c('NC','SC','GA','FL')
#diving
age.dat=read.csv(file='W:/SEDAR/Updates2014/Gag/Comps/Commercial/gag_ages_rinput.csv',header=TRUE)
#remove unused cols
age.dat=age.dat[,c(-1,-2)]
names(age.dat)=c('gear','tlmm','age','month','year','state')
age.dat$tlcm=rnd(age.dat$tlmm/10)
#convert upper and lower pooled values to 29 and 122 cm
age.dat$tlcm[age.dat$tlcm<29]=29 #lower (3 records for dat, none for dv)
age.dat$tlcm[age.dat$tlcm>122]=122 #upper (3 records for dat, none for dv)
age.hl=age.dat[age.dat$gear%in%c('HL','TWL','LL'),]
age.dv=age.dat[age.dat$gear%in%c('DV'),]
#convert to 3cm bins from 29 to 122 cm #############trickery
lenbins=seq(29,122,by=3)
#handline
age.hl$tl3cm[age.hl$tlcm%in%lenbins]=age.hl$tlcm[age.hl$tlcm%in%lenbins]
temp.tl=age.hl$tlcm+1
age.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
temp.tl=age.hl$tlcm-1
age.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
#diving
#convert to 3cm bins from 29 to 122 cm #############trickery
lenbins=seq(29,122,by=3)
age.dv$tl3cm[age.dv$tlcm%in%lenbins]=age.dv$tlcm[age.dv$tlcm%in%lenbins]
temp.tl=age.dv$tlcm+1
age.dv$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
temp.tl=age.dv$tlcm-1
age.dv$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
############## handline #################
# add zeros for missing combinations of state and length bin
#handline
y=min(age.hl$year):max(age.hl$year)
z=seq(min(age.hl$tl3cm,na.rm=TRUE),max(age.hl$tl3cm,na.rm=TRUE),by=3)
a=expand.grid(y=y,z=z)
colnames(a)=c('year','tl3cm')
age.hl.all=merge(a,age.hl,by=c('year','tl3cm'),all=TRUE)
age.hl.all$num=1
age.hl.all$num[is.na(age.hl.all$age)==TRUE] = 0
#length comp of aged fish (so that lcomp of aged fish can be compared to lcomp)
hl.lcompaged=summaryBy(num~year+tl3cm,data=age.hl.all,FUN=sum)
hl.lcompaged.tab=xtabs(num.sum~year+tl3cm,data=hl.lcompaged)
hl.lcompaged.nfish=rowSums(hl.lcompaged.tab)+0.0000001
for(i in 1:length(hl.lcompaged.nfish)){
if (hl.lcompaged.nfish[i]>st.cutoff){hl.lcompaged.nfish[i]=hl.lcompaged.nfish[i]
} else{hl.lcompaged.nfish[i]=0.0000001;hl.lcompaged.tab[i,]=0}
}
hl.lcompaged.norm=hl.lcompaged.tab/hl.lcompaged.nfish
########## hl age comp
#create num column for each age bin
age.hl.num=summaryBy(age~year+age,data=age.hl,FUN=length)
age.hl.num$numage=age.hl.num$age.length
# add zeros for missing combinations of year and age
y=min(age.hl$year):max(age.hl$year)
z=seq(min(age.hl$age,na.rm=TRUE),max(age.hl$age,na.rm=TRUE),by=1)
a=expand.grid(y=y,z=z)
colnames(a)=c('year','age')
age.hl.age=merge(a,age.hl.num,by=c('year','age'),all=TRUE)
age.hl.age$numage[is.na(age.hl.age$numage)==TRUE] = 0
#nominal age comp of aged fish
age.hl.acomp=summaryBy(numage~year+age,data=age.hl.age,FUN=sum)
age.hl.acomp.tab=xtabs(numage.sum~year+age,data=age.hl.acomp)
hl.age.acomp.nfish=rowSums(age.hl.acomp.tab)+0.0000001
for(i in 1:length(hl.age.acomp.nfish)){
if (hl.age.acomp.nfish[i]>st.cutoff){hl.age.acomp.nfish[i]=hl.age.acomp.nfish[i]
} else{hl.age.acomp.nfish[i]=0.0000001;age.hl.acomp.tab[i,]=0}
}
hl.age.acomp.norm=age.hl.acomp.tab/hl.age.acomp.nfish
#match length bins of matrices of wgted len comp with length comp of ages
#transform weighted length comp matrix into dataframe
hl.wgt.rshp=melt(hl.norm.w)
yr=rep(rownames(hl.norm.w),dim(hl.norm.w)[2])
hl.wgt.rshp=cbind(yr,hl.wgt.rshp)
names(hl.wgt.rshp)=c('year','tl3cm','lcomp')
hl.wgt.rshp$tl3cm=as.numeric(as.character(hl.wgt.rshp$tl3cm))
hl.wgt.rshp$year=as.numeric(as.character(hl.wgt.rshp$year))
#transform lencomp of aged fish matrix into dataframe
hl.age.lcomp.rshp=melt(hl.lcompaged.norm,id=c("year"))
names(hl.age.lcomp.rshp)=c('year','tl3cm','lcompaged')
## check that length bins match
# min(hl.wgt.rshp$tl3cm)
# max(hl.wgt.rshp$tl3cm)
# min(hl.age.lcomp.rshp$tl3cm)
# max(hl.age.lcomp.rshp$tl3cm)
#begin weighting
#merge both datasets together before division
chih=merge(hl.wgt.rshp,hl.age.lcomp.rshp,by=c('year','tl3cm'),all=TRUE)
#divide wgted comp by len comp (aged) to derive Chih's Reweighting factor
chih$wgt=chih$lcomp/chih$lcompaged
##remove NAs and InF
chih$wgt[is.infinite(chih$wgt)] <- 0
chih$wgt[is.na(chih$wgt)==TRUE] = 0
#####no length comps for 1979-82 so, use nominal (wt=1)
chih$wgt[chih$year%in%c(1979,1980,1981,1982)]=1
#combine age and chih reweighting data by year and len bin
acomp.hl=merge(age.hl,chih,by=c('year','tl3cm'),all=TRUE)
acomp.hl$wgt[is.na(acomp.hl$wgt)==TRUE] = 0
#remove unneccessary columns
acomp.hl=acomp.hl[,c(1,2,5,11)]
##############################WEIGHTED AGE COMP
acomp.hl.w=summaryBy(wgt~year+age,data=acomp.hl,FUN=sum)
acomp.hl.w.tab=xtabs(wgt.sum~year+age,data=acomp.hl.w)
acomp.hl.w.norm=acomp.hl.w.tab/rowSums(acomp.hl.w.tab)
##pool weighted and unweighted age comps (0-20+)
x=rowSums(acomp.hl.w.norm[,21:28])
y=cbind(acomp.hl.w.norm[,1:20],x)
colnames(y)=0:20
acomp.hl.w.norm=y
x=rowSums(hl.age.acomp.norm[,21:28])
y=cbind(hl.age.acomp.norm[,1:20],x)
colnames(y)=0:20
hl.age.acomp.norm=y
head(age.hl)
x=age.hl[age.hl$state!="",]
levels(as.factor(age.hl$state))
x=age.hl[as.character(age.hl$state)!="",]
levels(as.factor(age.hl$state))
x=summaryBy(tlcm~year+state,data=age.hl,FUN=length)
y=xtabel(x,digits=0)
y=xtable(x,digits=0)
y
x=xtabs(tlcm~year+state,data=age.hl)
x
x=xtabs(state~year+state,data=age.hl)
age.hl$tmp=1
x=xtabs(tmp~year+state,data=age.hl)
x
x$GaFL=x[,3]+x[,4]
x=xtabs(tmp~year+state,data=age.hl)
x=as.data.frame.matrix(x)
x$GaFL=x[,3]+x[,4]
x
x=xtabs(tmp~year+state,data=age.hl)
x=as.data.frame.matrix(x)
x$GaFL=x[,2]+x[,3]
x
x=x[,c(-1,-2,-3)]
x
z=levels(age.dat$gear)
z
dim(age.hl)
dim(age.dat)
y=age.hl[age.hl$gear=="LL",]
y
y=age.hl[age.hl$gear=="TWL",]
y
table6=xtable(acomp.hl.w.norm,digits=4)
print(table5,type="html")
hl.ss=cbind(nc.hl.nfish,sc.hl.nfish,ga.hl.nfish,fl.hl.nfish)
hl.ss$total=rowSums(hl.ss)
colnames(hl.ss)=c('NC','SC','GA','FL','Total')
head(hl.ss)
#handlinernames=as.numeric(row.names(hl.norm.unw))
hl.ss=cbind(nc.hl.nfish,sc.hl.nfish,ga.hl.nfish,fl.hl.nfish)
hl.ss=as.data.frame.matrix(hl.ss)
hl.ss$total=rowSums(hl.ss)
colnames(hl.ss)=c('NC','SC','GA','FL','Total')
head(hl.ss)
dv.ss=cbind(nc.dv.nfish,sc.dv.nfish,ga.dv.nfish,fl.dv.nfish)
dv.ss=as.data.frame.matrix(dv.ss)
dv.ss$total=rowSums(dv.ss)
colnames(dv.ss)=c('NC','SC','GA','FL','Total')
head(dv.ss)
